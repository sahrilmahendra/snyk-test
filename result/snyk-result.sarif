{"$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver" : {"name" : "SnykCode","semanticVersion" : "1.1298.1","version" : "1.1298.1","informationUri" : "https://docs.snyk.io/","rules" : [{"id": "go/HardcodedPassword","name": "HardcodedPassword","shortDescription": {"text": "Use of Hardcoded Passwords"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "\n## Details\n\nDevelopers may use hardcoded passwords during development to streamline setup or simplify authentication while testing. Although these passwords are intended to be removed before deployment, they are sometimes inadvertently left in the code. This introduces serious security risks, especially if the password grants elevated privileges or is reused across multiple systems.\n\nAn attacker who discovers a hardcoded password can potentially gain unauthorized access, escalate privileges, exfiltrate sensitive data, or disrupt service availability. If the password is reused across different environments or applications, the compromise can spread quickly and broadly.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.","text": ""},"properties": {"tags": ["go","HardcodedPassword","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/biningo/note-gin/commit/42791cf29b4b86e2d1f4c384a940591a47e13219?diff=split#diff-ca713ed723a0edf86b651d90157af74fd9d9e739b791097a4b13e697e5699253L-1","lines": [{"line": "func GetToken() string {\n","lineNumber": 7,"lineChange": "removed"},{"line": "\taccessKey := \"WdlLw-oFN1mbj-0vngrbQ8Si39u0dgackq0v9L4T\"\n","lineNumber": 8,"lineChange": "removed"},{"line": "\tsecretKey := \"HoKZLcwE1BtYWe9ze__jmwWsfqPeAcbHURN48t9A\"\n","lineNumber": 9,"lineChange": "removed"},{"line": "\tbucket := \"note-gin\"\n","lineNumber": 10,"lineChange": "removed"},{"line": "\tputPolicy := storage.PutPolicy{\n","lineNumber": 11,"lineChange": "removed"},{"line": "\t\tScope: bucket,\n","lineNumber": 12,"lineChange": "removed"},{"line": "\t}\n","lineNumber": 13,"lineChange": "removed"},{"line": "\tmac := qbox.NewMac(accessKey, secretKey)\n","lineNumber": 14,"lineChange": "removed"},{"line": "\tupToken := putPolicy.UploadToken(mac)\n","lineNumber": 15,"lineChange": "removed"},{"line": "\treturn upToken\n","lineNumber": 16,"lineChange": "removed"},{"line": "var QiniuAccessKey string\n","lineNumber": 4,"lineChange": "added"},{"line": "var QiniuSecretKey string\n","lineNumber": 5,"lineChange": "added"},{"line": "\n","lineNumber": 6,"lineChange": "added"},{"line": "func SetUp() {\n","lineNumber": 7,"lineChange": "added"},{"line": "\tQiniuAccessKey = config.Conf.AppConfig.QiniuAccessKey\n","lineNumber": 8,"lineChange": "added"},{"line": "\tQiniuSecretKey = config.Conf.AppConfig.QiniuSecretKey\n","lineNumber": 9,"lineChange": "added"}]},{"commitURL": "https://github.com/weibocom/opendcp/commit/ec5209d39b8ce28a67bf10f0fe6379f6c65ec454?diff=split#diff-d842348011b17bb4526453c3a207e6032219a4a6cafdf5f0e2c9b3d0da2fae8cL-1","lines": [{"line": "IdentityEndpoint: \"http://10.39.59.27:5000/v3\",\n","lineNumber": 124,"lineChange": "removed"},{"line": "Username: \"admin\",\n","lineNumber": 125,"lineChange": "removed"},{"line": "Password: \"ZYGL32NDG7JS8IGC\",\n","lineNumber": 126,"lineChange": "removed"},{"line": "IdentityEndpoint: url,\n","lineNumber": 127,"lineChange": "added"},{"line": "Username: conf.Config.OpUserName,\n","lineNumber": 128,"lineChange": "added"},{"line": "Password: conf.Config.OpPassWord,\n","lineNumber": 129,"lineChange": "added"}]},{"commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1","lines": [{"line": "\t// InvalidConfigValue is the constant value for invalid config values\n","lineNumber": 9,"lineChange": "added"},{"line": "\t// which must be changed for production configurations before successful\n","lineNumber": 10,"lineChange": "added"},{"line": "\t// startup\n","lineNumber": 11,"lineChange": "added"},{"line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n","lineNumber": 12,"lineChange": "added"},{"line": "\n","lineNumber": 13,"lineChange": "added"},{"line": "\t// DebugMode is the default debug mode\n","lineNumber": 14,"lineChange": "none"},{"line": "\tDefaultDebug = false\n","lineNumber": 15,"lineChange": "none"},{"line": "\n","lineNumber": 16,"lineChange": "none"},{"line": "\t// DefaultData is the default data directory for storage\n","lineNumber": 17,"lineChange": "none"},{"line": "\tDefaultData = \"./data\"\n","lineNumber": 18,"lineChange": "none"},{"line": "\n","lineNumber": 19,"lineChange": "none"},{"line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n","lineNumber": 20,"lineChange": "none"},{"line": "\tDefaultStore = \"bitcask://twtxt.db\"\n","lineNumber": 21,"lineChange": "none"},{"line": "\n","lineNumber": 22,"lineChange": "none"},{"line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n","lineNumber": 23,"lineChange": "none"},{"line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n","lineNumber": 24,"lineChange": "none"},{"line": "\n","lineNumber": 25,"lineChange": "none"},{"line": "\t// DefaultAdminXXX is the default admin user / pod operator\n","lineNumber": 26,"lineChange": "none"},{"line": "\tDefaultAdminUser  = \"admin\"\n","lineNumber": 27,"lineChange": "none"},{"line": "\tDefaultAdminName  = \"Administrator\"\n","lineNumber": 28,"lineChange": "none"},{"line": "\tDefaultAdminEmail = \"support@twt.social\"\n","lineNumber": 29,"lineChange": "none"},{"line": "\n","lineNumber": 30,"lineChange": "none"},{"line": "\t// DefaultName is the default instance name\n","lineNumber": 31,"lineChange": "none"},{"line": "\tDefaultName = \"twtxt.net\"\n","lineNumber": 32,"lineChange": "none"},{"line": "\n","lineNumber": 33,"lineChange": "none"},{"line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n","lineNumber": 34,"lineChange": "none"},{"line": "\tDefaultMetaTitle       = \"\"\n","lineNumber": 35,"lineChange": "none"},{"line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n","lineNumber": 36,"lineChange": "none"},{"line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n","lineNumber": 37,"lineChange": "none"},{"line": "\tDefaultMetaDescription = \"ðŸ“• twtxt is a Self-Hosted, Twitterâ„¢-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n","lineNumber": 38,"lineChange": "none"},{"line": "\n","lineNumber": 39,"lineChange": "none"},{"line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n","lineNumber": 40,"lineChange": "none"},{"line": "\tDefaultTheme = \"dark\"\n","lineNumber": 41,"lineChange": "none"},{"line": "\n","lineNumber": 42,"lineChange": "none"},{"line": "\t// DefaultOpenRegistrations is the default for open user registrations\n","lineNumber": 43,"lineChange": "none"},{"line": "\tDefaultOpenRegistrations = false\n","lineNumber": 44,"lineChange": "none"},{"line": "\n","lineNumber": 45,"lineChange": "none"},{"line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n","lineNumber": 46,"lineChange": "none"},{"line": "\tDefaultRegisterMessage = \"\"\n","lineNumber": 47,"lineChange": "none"},{"line": "\n","lineNumber": 48,"lineChange": "none"},{"line": "\t// DefaultCookieSecret is the server's default cookie secret\n","lineNumber": 49,"lineChange": "none"},{"line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n","lineNumber": 45,"lineChange": "removed"},{"line": "\tDefaultCookieSecret = InvalidConfigValue\n","lineNumber": 50,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 20,"cwe": ["CWE-798","CWE-259"]}},{"id": "go/PT","name": "PT","shortDescription": {"text": "Path Traversal"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```","text": ""},"properties": {"tags": ["go","PT","Security","SourceNonServer","SourceLocalEnv","SourceCLI","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/uadmin/uadmin/commit/c0dfdd6a6dd0d3f3906dc1b001a154aa690b729c?diff=split#diff-36cbbf58d3f192b92e5424da449fbab3eb283ea0ee7a1b210615b6a1e096ef44L-1","lines": [{"line": "file, err := os.Open(\"./media/\" + r.URL.Path)\n","lineNumber": 17,"lineChange": "removed"},{"line": "file, err := os.Open(\"./media/\" + path.Clean(r.URL.Path))\n","lineNumber": 18,"lineChange": "added"}]},{"commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1","lines": [{"line": "\t// Check for \"..\" in the url path,\n","lineNumber": 42,"lineChange": "added"},{"line": "\t// if we find \"..\" in the path we will not serve static files\n","lineNumber": 43,"lineChange": "added"},{"line": "\tif strings.Contains(path, \"..\") {\n","lineNumber": 44,"lineChange": "added"},{"line": "\t\ts.next.ServeHTTP(w, r)\n","lineNumber": 45,"lineChange": "added"},{"line": "\t\treturn\n","lineNumber": 46,"lineChange": "added"},{"line": "\t}\n","lineNumber": 47,"lineChange": "added"},{"line": "\n","lineNumber": 48,"lineChange": "added"},{"line": "\t// Add index.html to path if it ends with /\n","lineNumber": 49,"lineChange": "none"},{"line": "\tif path[len(path)-1:] == \"/\" {\n","lineNumber": 50,"lineChange": "none"},{"line": "\t\tpath = path + \"index.html\"\n","lineNumber": 51,"lineChange": "none"},{"line": "\t}\n","lineNumber": 52,"lineChange": "none"},{"line": "\n","lineNumber": 53,"lineChange": "none"},{"line": "\t// Add /index.html to path if a directory\n","lineNumber": 54,"lineChange": "none"},{"line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n","lineNumber": 55,"lineChange": "none"},{"line": "\t\tpath = path + \"/index.html\"\n","lineNumber": 56,"lineChange": "none"},{"line": "\t}\n","lineNumber": 57,"lineChange": "none"},{"line": "\n","lineNumber": 58,"lineChange": "none"},{"line": "\t// If file exist serve it\n","lineNumber": 59,"lineChange": "none"},{"line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n","lineNumber": 60,"lineChange": "none"}]},{"commitURL": "https://github.com/hybridgroup/gocv/commit/56b2d918ff49aa835767b6dea2516f184549161c?diff=split#diff-56ad2b2d382898787e7d2fbc2e25b66ebdcc2015e370934fc0882530c07f5719L-1","lines": [{"line": "file, err := os.Open(path)\n","lineNumber": 132,"lineChange": "removed"},{"line": "file, err := os.Open(filepath.Clean(path))\n","lineNumber": 133,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 58,"cwe": ["CWE-23"]}},{"id": "go/Sqli","name": "Sqli","shortDescription": {"text": "SQL Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.","text": ""},"properties": {"tags": ["go","Sqli","Security","SourceServer","SourceRequestUrl","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/hasadna/open_pension/commit/?diff=split#diff-3a92018b19545a9dd501e9502a3af57f67f7f2dace9eb1939c195edd602a6fd5L-1","lines": [{"line": "db.First(&file, c.Param(\"id\"))\n","lineNumber": 29,"lineChange": "removed"},{"line": "db.First(&file, \"id = ?\", c.Param(\"id\"))\n","lineNumber": 29,"lineChange": "added"}]},{"commitURL": "https://github.com/open-falcon/falcon-plus/commit/1c86d540ebd9b806c67d3562e7fe3bf13da6076a?diff=split#diff-9e25f55f3f64adce726a9c292606ef177b40cfae25dc6e704308d3863f9a8398L-1","lines": [{"line": "import (\n","lineNumber": 16,"lineChange": "none"},{"line": "\t\"errors\"\n","lineNumber": 17,"lineChange": "none"},{"line": "\t\"fmt\"\n","lineNumber": 18,"lineChange": "none"},{"line": "\t\"regexp\"\n","lineNumber": 19,"lineChange": "none"},{"line": "\t\"strconv\"\n","lineNumber": 20,"lineChange": "none"},{"line": "\n","lineNumber": 21,"lineChange": "none"},{"line": "\tlog \"github.com/Sirupsen/logrus\"\n","lineNumber": 22,"lineChange": "none"},{"line": "\t\"github.com/gin-gonic/gin\"\n","lineNumber": 23,"lineChange": "none"},{"line": "\t\"github.com/jinzhu/gorm\"\n","lineNumber": 24,"lineChange": "none"},{"line": "\th \"github.com/open-falcon/falcon-plus/modules/api/app/helper\"\n","lineNumber": 25,"lineChange": "none"},{"line": "\tf \"github.com/open-falcon/falcon-plus/modules/api/app/model/falcon_portal\"\n","lineNumber": 26,"lineChange": "none"},{"line": "\tu \"github.com/open-falcon/falcon-plus/modules/api/app/utils\"\n","lineNumber": 27,"lineChange": "none"},{"line": ")\n","lineNumber": 28,"lineChange": "none"},{"line": "\n","lineNumber": 29,"lineChange": "none"},{"line": "func GetHostGroups(c *gin.Context) {\n","lineNumber": 30,"lineChange": "none"},{"line": "\tvar (\n","lineNumber": 31,"lineChange": "none"},{"line": "\t\tlimit int\n","lineNumber": 32,"lineChange": "none"},{"line": "\t\tpage  int\n","lineNumber": 33,"lineChange": "none"},{"line": "\t\terr   error\n","lineNumber": 34,"lineChange": "none"},{"line": "\t)\n","lineNumber": 35,"lineChange": "none"},{"line": "\tpageTmp := c.DefaultQuery(\"page\", \"\")\n","lineNumber": 36,"lineChange": "none"},{"line": "\tlimitTmp := c.DefaultQuery(\"limit\", \"\")\n","lineNumber": 37,"lineChange": "none"},{"line": "\tq := c.DefaultQuery(\"q\", \".+\")\n","lineNumber": 38,"lineChange": "none"},{"line": "\tpage, limit, err = h.PageParser(pageTmp, limitTmp)\n","lineNumber": 39,"lineChange": "none"},{"line": "\tif err != nil {\n","lineNumber": 40,"lineChange": "none"},{"line": "\t\th.JSONR(c, badstatus, err.Error())\n","lineNumber": 41,"lineChange": "none"},{"line": "\t\treturn\n","lineNumber": 42,"lineChange": "none"},{"line": "\t}\n","lineNumber": 43,"lineChange": "none"},{"line": "\tvar hostgroups []f.HostGroup\n","lineNumber": 44,"lineChange": "none"},{"line": "\tvar dt *gorm.DB\n","lineNumber": 45,"lineChange": "none"},{"line": "\tif limit != -1 && page != -1 {\n","lineNumber": 46,"lineChange": "none"},{"line": "\t\tdt = db.Falcon.Raw(fmt.Sprintf(\"SELECT * from grp  where grp_name regexp '%s' limit %d,%d\", q, page, limit)).Scan(&hostgroups)\n","lineNumber": 47,"lineChange": "removed"},{"line": "\t\tdt = db.Falcon.Raw(\"SELECT * from grp  where grp_name regexp ? limit ?,?\", q, page, limit).Scan(&hostgroups)\n","lineNumber": 47,"lineChange": "added"}]},{"commitURL": "https://github.com/Civil/ch-flamegraphs/commit/?diff=split#diff-f6872b299b410bb08105400c7edfbf53652f664dbfce717449f8c913d0697eb1L-1","lines": [{"line": "\tquery := \"select Timestamp from stacktraceTimestamps where Application='\" + application + \"' order by Timestamp\"\n","lineNumber": 558,"lineChange": "removed"},{"line": "\tquery := \"select Timestamp from stacktraceTimestamps where Application=? order by Timestamp\"\n","lineNumber": 558,"lineChange": "added"},{"line": "\tif last {\n","lineNumber": 559,"lineChange": "none"},{"line": "\t\tquery = \"select max(Timestamp) from stacktraceTimestamps where Application='\" + application + \"' order by Timestamp\"\n","lineNumber": 560,"lineChange": "removed"},{"line": "\t\tquery = \"select max(Timestamp) from stacktraceTimestamps where Application=? order by Timestamp\"\n","lineNumber": 560,"lineChange": "added"},{"line": "\t}\n","lineNumber": 561,"lineChange": "none"},{"line": "\n","lineNumber": 562,"lineChange": "none"},{"line": "\tvar resp []int64\n","lineNumber": 563,"lineChange": "none"},{"line": "\trows, err := config.db.Query(query)\n","lineNumber": 564,"lineChange": "removed"},{"line": "\trows, err := config.db.Query(query, application)\n","lineNumber": 564,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 12,"cwe": ["CWE-89"]}}]}},"results": [{"ruleId": "go/HardcodedPassword","ruleIndex": 0,"level": "warning","message": {"text":"Do not hardcode passwords in code. Found hardcoded saved in password.","markdown":"Do not hardcode passwords in code. Found {0} saved in {1}.","arguments": ["[hardcoded](0)","[password](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":11,  "endLine":11,  "startColumn":2,  "endColumn":10}  }}],"fingerprints": {"identity": "a7bfae52-f14a-4be8-a2e4-5bee39bcad28","0": "13cd7b92c7e40a6413b21251100320621cdabcb9b49c05e50a188ca26944a69d","1": "821c6d7e.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3.821c6d7e.fb31f608.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3","snyk/asset/finding/v1": "a7bfae52-f14a-4be8-a2e4-5bee39bcad28"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":11,  "endLine":11,  "startColumn":14,  "endColumn":24}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":11,  "endLine":11,  "startColumn":2,  "endColumn":10}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 584,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "go/PT","ruleIndex": 1,"level": "warning","message": {"text":"Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","arguments": ["[a CLI argument](0)","[flows](1),(2),(3)","[os.ReadFile](4)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":67,  "endLine":67,  "startColumn":15,  "endColumn":26}  }}],"fingerprints": {"1": "ba4e4356.348ddf12.45df3e14.9692a5c1.db2bb079.67ab4541.0873598c.e01cd24f.f93f09c7.348ddf12.45df3e14.9692a5c1.f1d9f854.67ab4541.0873598c.8b4eb32f","snyk/asset/finding/v1": "738d6077-5427-4c88-99c4-6b6dd2c1a52f","identity": "738d6077-5427-4c88-99c4-6b6dd2c1a52f","0": "314a23993728d92a3271bb84f85ff0d6b7cd50e8202e1159fb6f983cf8d70f7f"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":66,  "endLine":66,  "startColumn":14,  "endColumn":24}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":66,  "endLine":66,  "startColumn":14,  "endColumn":24}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":66,  "endLine":66,  "startColumn":2,  "endColumn":10}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":67,  "endLine":67,  "startColumn":27,  "endColumn":35}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "scripts/fix_suggestion.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":67,  "endLine":67,  "startColumn":15,  "endColumn":26}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 534,"priorityScoreFactors": [  {"label": true,"type": "hotFileCodeFlow"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "go/Sqli","ruleIndex": 2,"level": "error","message": {"text":"Unsanitized input from the request URL flows into Query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.","arguments": ["[the request URL](0)","[flows](1),(2),(3),(4),(5),(6),(7),(8)","[Query](9)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":21,  "endLine":21,  "startColumn":16,  "endColumn":24}  }}],"fingerprints": {"identity": "b9c6b879-5f95-423c-b59c-c6766f772967","0": "42b0565234d9f41668ba8255b1e77478373c91724f320f8a0f0632e3e1b2857d","1": "7572e22a.73eb5804.45df3e14.b1e0a0f9.db2bb079.67ab4541.860c51ff.3e33c505.941a6df3.4f3df1dd.fd4eeae2.e22980a8.f180887a.ffb218e0.a145879e.c9b2e9ad","snyk/asset/finding/v1": "b9c6b879-5f95-423c-b59c-c6766f772967"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":19,  "endLine":19,  "startColumn":15,  "endColumn":26}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":19,  "endLine":19,  "startColumn":15,  "endColumn":26}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":19,  "endLine":19,  "startColumn":15,  "endColumn":32}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":19,  "endLine":19,  "startColumn":3,  "endColumn":11}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":20,  "endLine":20,  "startColumn":54,  "endColumn":62}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":20,  "endLine":20,  "startColumn":12,  "endColumn":62}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":20,  "endLine":20,  "startColumn":12,  "endColumn":68}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":20,  "endLine":20,  "startColumn":3,  "endColumn":8}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":21,  "endLine":21,  "startColumn":25,  "endColumn":30}}}},{"location": {"id": 9,"physicalLocation": {"artifactLocation": {  "uri": "main.go",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":21,  "endLine":21,  "startColumn":16,  "endColumn":24}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 834,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}}],"properties": {"coverage": [{"files": 6,"isSupported": true,"lang": "Go","type": "SUPPORTED"}]}}]}
